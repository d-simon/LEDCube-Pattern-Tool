/*
Original:
    Based on ledcube.c from Make: September 7, 2007 weekend podcast
    http://blog.makezine.com/archive/2007/09/make_a_pocket_led_cube_we.html

    Custom animation programmed by Mark Boszko, http://stationinthemetro.com
Adaption:
    David Simon â€“ me@davidsimon.ch
    Use Depth-height-width order when exporting the code
*/

#include <avr/pgmspace.h>             // allows use of PROGMEM to store patterns in flash

#define CUBESIZE 3
#define PLANESIZE CUBESIZE*CUBESIZE
#define PLANETIME 3333                // time each plane is displayed in us -> 100 Hz refresh
#define TIMECONST 10                  // multiplies DisplayTime to get ms

#define BUTTON_PRESSED 0

#define PATTERN_P_BASE 0
#define PATTERN_P_TEAM 1
#define PATTERN_P_FILLER 2
#define PATTERN_P_ON 3
#define PATTERN_P_CUSTOM 4

#define PATTERN_LENGTH 4

// LED Pattern Table in PROGMEM - last column is display time in 10 ms units
// TODO: this could be a lot more compact, but not with binary pattern representation
prog_uchar PROGMEM basePattern[] = {
    B101, B010, B101, B000, B000, B000, B000, B000, B000, 5 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 5 ,
    B000, B000, B000, B000, B000, B000, B101, B010, B101, 5 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 5 ,
    B101, B000, B000, B010, B000, B000, B101, B000, B000, 5 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 5 ,
    B000, B000, B101, B000, B000, B010, B000, B000, B101, 5 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 5 ,
    B101, B010, B101, B000, B000, B000, B000, B000, B000, 5 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 4 ,
    B000, B000, B000, B000, B000, B000, B101, B010, B101, 4 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 4 ,
    B101, B000, B000, B010, B000, B000, B101, B000, B000, 4 ,
    B000, B001, B000, B000, B010, B000, B000, B100, B000, 11 ,
    B000, B010, B000, B000, B010, B000, B000, B010, B000, 11 ,
    B000, B100, B000, B000, B010, B000, B000, B001, B000, 11 ,
    B000, B000, B000, B000, B111, B000, B000, B000, B000, 11 ,
    B000, B001, B000, B000, B010, B000, B000, B100, B000, 11 ,
    B000, B010, B000, B000, B010, B000, B000, B010, B000, 11 ,
    B000, B100, B000, B000, B010, B000, B000, B001, B000, 11 ,
    B000, B000, B000, B000, B111, B000, B000, B000, B000, 11 ,
    B000, B000, B000, B010, B010, B010, B000, B000, B000, 11 ,
    B010, B000, B000, B000, B010, B000, B000, B000, B010, 11 ,
    B000, B010, B000, B000, B010, B000, B000, B010, B000, 11 ,
    B000, B000, B010, B000, B010, B000, B010, B000, B000, 11 ,
    B000, B010, B000, B000, B010, B000, B000, B010, B000, 11 ,
    B010, B000, B000, B000, B010, B000, B000, B000, B010, 11 ,
    B000, B010, B000, B000, B000, B010, B000, B000, B010, 11 ,
    B000, B000, B010, B000, B000, B010, B000, B000, B010, 11 ,
    B000, B000, B101, B000, B000, B010, B000, B010, B000, 11 ,
    B000, B000, B111, B000, B010, B000, B010, B000, B000, 11 ,
    B000, B111, B000, B101, B000, B000, B000, B010, B000, 11 ,
    B111, B000, B000, B000, B111, B000, B000, B000, B101, 11 ,
    B000, B111, B000, B000, B000, B111, B000, B111, B000, 11 ,
    B000, B000, B111, B000, B111, B000, B101, B000, B000, 11 ,
    B000, B111, B000, B101, B000, B000, B000, B101, B000, 11 ,
    B101, B000, B000, B000, B101, B000, B000, B000, B010, 11 ,
    B000, B101, B000, B000, B000, B010, B000, B000, B111, 11 ,
    B000, B000, B010, B000, B000, B111, B000, B000, B000, 11 ,
    B000, B000, B111, B000, B000, B000, B000, B000, B111, 11 ,
    B000, B000, B111, B000, B000, B111, B000, B000, B111, 11 ,
    B000, B000, B111, B000, B000, B111, B000, B111, B000, 11 ,
    B000, B000, B111, B000, B111, B000, B111, B000, B000, 11 ,
    B000, B111, B000, B111, B000, B000, B000, B111, B000, 11 ,
    B111, B000, B000, B000, B111, B000, B000, B000, B111, 11 ,
    B000, B111, B000, B000, B000, B111, B000, B111, B000, 11 ,
    B000, B000, B111, B000, B111, B000, B111, B000, B000, 11 ,
    B000, B111, B000, B111, B000, B000, B000, B111, B000, 11 ,
    B111, B000, B000, B000, B111, B000, B000, B000, B111, 11 ,
    B000, B111, B000, B010, B010, B010, B000, B111, B000, 11 ,
    B100, B010, B001, B001, B010, B100, B100, B010, B001, 11 ,
    B010, B010, B010, B000, B111, B000, B010, B010, B010, 11 ,
    B001, B010, B100, B100, B010, B001, B001, B010, B100, 11 ,
    B000, B111, B000, B010, B010, B010, B000, B111, B000, 11 ,
    B100, B010, B001, B001, B010, B100, B100, B010, B001, 11 ,
    B010, B010, B010, B000, B111, B000, B010, B010, B010, 11 ,
    B001, B010, B100, B100, B010, B001, B001, B010, B100, 11 ,
    B000, B111, B000, B010, B010, B010, B000, B111, B000, 11 ,
    B100, B010, B001, B001, B010, B100, B100, B010, B001, 11 ,
    B010, B010, B010, B000, B111, B000, B010, B010, B010, 11 ,
    B001, B010, B100, B101, B010, B101, B100, B010, B001, 11 ,
    B000, B101, B010, B000, B101, B010, B000, B101, B010, 11 ,
    B000, B010, B101, B000, B010, B101, B000, B010, B101, 11 ,
    B010, B101, B000, B010, B101, B000, B010, B101, B000, 11 ,
    B101, B010, B000, B101, B010, B000, B101, B010, B000, 11 ,
    B000, B101, B010, B000, B101, B010, B000, B101, B010, 11 ,
    B000, B010, B101, B000, B010, B101, B000, B010, B101, 11 ,
    B010, B101, B000, B010, B101, B000, B010, B101, B000, 11 ,
    B101, B010, B000, B101, B010, B000, B101, B010, B000, 11 ,
    B000, B101, B010, B000, B101, B010, B000, B101, B010, 11 ,
    B000, B000, B100, B000, B000, B010, B000, B000, B001, 11 ,
    B000, B000, B000, B000, B000, B111, B000, B000, B000, 11 ,
    B000, B000, B001, B000, B000, B010, B000, B000, B100, 11 ,
    B000, B000, B010, B000, B000, B010, B000, B000, B010, 11 ,
    B000, B000, B100, B000, B000, B010, B000, B000, B001, 11 ,
    B000, B000, B000, B000, B000, B111, B000, B000, B000, 11 ,
    B000, B000, B001, B000, B000, B010, B000, B000, B100, 11 ,
    B000, B000, B010, B000, B000, B010, B000, B000, B010, 11 ,
    B000, B000, B010, B000, B010, B000, B000, B000, B010, 11 ,
    B000, B010, B000, B010, B000, B000, B000, B010, B000, 11 ,
    B010, B000, B000, B010, B000, B000, B010, B000, B000, 11 ,
    B100, B000, B000, B010, B000, B000, B001, B000, B000, 11 ,
    B000, B000, B000, B111, B000, B000, B000, B000, B000, 11 ,
    B001, B000, B000, B010, B000, B000, B100, B000, B000, 11 ,
    B010, B000, B000, B010, B000, B000, B010, B000, B000, 11 ,
    B100, B000, B000, B010, B000, B000, B001, B000, B000, 11 ,
    B000, B000, B000, B111, B000, B000, B000, B000, B000, 11 ,
    B001, B000, B000, B010, B000, B000, B100, B000, B000, 11 ,
    B010, B000, B000, B010, B000, B000, B010, B000, B000, 11 ,
    B000, B000, B000, B010, B000, B000, B000, B000, B000, 11 ,
    B000, B000, B000, B010, B010, B000, B000, B000, B000, 11 ,
    B000, B000, B000, B010, B010, B010, B000, B000, B000, 11 ,
    B000, B000, B001, B010, B010, B010, B000, B000, B100, 11 ,
    B000, B000, B011, B010, B010, B010, B000, B000, B110, 11 ,
    B000, B000, B110, B010, B010, B010, B000, B000, B011, 11 ,
    B000, B000, B100, B010, B010, B111, B000, B000, B001, 11 ,
    B000, B000, B001, B010, B010, B111, B000, B000, B100, 11 ,
    B000, B000, B011, B010, B010, B010, B000, B000, B110, 11 ,
    B000, B000, B110, B010, B010, B010, B000, B000, B011, 11 ,
    B000, B000, B110, B010, B010, B111, B000, B000, B011, 11 ,
    B000, B000, B111, B010, B010, B111, B000, B000, B111, 11 ,
    B000, B000, B111, B111, B010, B101, B000, B000, B111, 11 ,
    B001, B000, B111, B010, B010, B111, B100, B000, B111, 11 ,
    B010, B000, B111, B010, B010, B111, B010, B000, B111, 11 ,
    B100, B000, B111, B010, B010, B111, B001, B000, B111, 11 ,
    B000, B000, B111, B111, B010, B111, B000, B000, B111, 11 ,
    B001, B000, B111, B010, B010, B111, B100, B000, B111, 11 ,
    B010, B000, B111, B010, B010, B111, B010, B000, B111, 11 ,
    B100, B000, B111, B010, B010, B111, B001, B000, B111, 11 ,
    B000, B000, B111, B111, B010, B111, B000, B000, B111, 11 ,
    B001, B000, B111, B010, B010, B111, B100, B000, B111, 11 ,
    B010, B000, B111, B010, B010, B111, B010, B000, B111, 11 ,
    B100, B000, B111, B010, B010, B111, B001, B000, B111, 11 ,
    B000, B000, B111, B111, B010, B111, B000, B000, B111, 11 ,
    B001, B000, B111, B010, B010, B111, B100, B000, B111, 11 ,
    B010, B000, B111, B010, B010, B111, B010, B000, B111, 11 ,
    B100, B000, B111, B010, B010, B111, B001, B000, B111, 11 ,
    B111, B010, B111, B111, B010, B111, B111, B010, B111, 11 ,
    B111, B010, B111, B111, B111, B111, B111, B010, B111, 11 ,
    B111, B111, B111, B111, B010, B111, B111, B111, B111, 11 ,
    B111, B010, B111, B111, B111, B111, B111, B010, B111, 11 ,
    B010, B111, B010, B101, B010, B101, B010, B111, B010, 11 ,
    B101, B010, B101, B010, B111, B010, B101, B010, B101, 11 ,
    B010, B111, B010, B101, B010, B101, B010, B111, B010, 11 ,
    B101, B010, B101, B010, B111, B010, B101, B010, B101, 11 ,
    B111, B111, B111, B000, B000, B000, B111, B111, B111, 11 ,
    B000, B000, B000, B111, B111, B111, B000, B000, B000, 11 ,
    B111, B111, B111, B000, B000, B000, B111, B111, B111, 11 ,
    B000, B000, B000, B111, B111, B111, B000, B000, B000, 11 ,
    B000, B111, B000, B000, B111, B000, B000, B111, B000, 11 ,
    B111, B000, B111, B111, B000, B111, B111, B000, B111, 11 ,
    B000, B111, B000, B000, B111, B000, B000, B111, B000, 11 ,
    B100, B010, B001, B100, B010, B001, B100, B010, B001, 11 ,
    B010, B010, B010, B010, B010, B010, B010, B010, B010, 11 ,
    B001, B010, B100, B001, B010, B100, B001, B010, B100, 11 ,
    B000, B111, B000, B000, B111, B000, B000, B111, B000, 11 ,
    B100, B010, B001, B100, B010, B001, B100, B010, B001, 11 ,
    B010, B010, B010, B010, B010, B010, B010, B010, B010, 11 ,
    B001, B010, B100, B001, B010, B100, B001, B010, B100, 11 ,
    B000, B111, B000, B000, B111, B000, B000, B111, B000, 11 ,
    B100, B010, B001, B100, B010, B001, B100, B010, B001, 11 ,
    B010, B010, B010, B010, B010, B010, B010, B010, B010, 11 ,
    B010, B010, B111, B010, B010, B111, B010, B010, B111, 11 ,
    B010, B111, B111, B010, B111, B111, B010, B111, B111, 11 ,
    B111, B111, B010, B111, B111, B010, B111, B111, B010, 11 ,
    B111, B111, B111, B111, B111, B111, B111, B111, B111, 11 ,
    B000, B000, B000, B000, B000, B000, B000, B000, B000, 11 ,
    B111, B111, B111, B111, B111, B111, B111, B111, B111, 11 ,
    B000, B000, B000, B000, B000, B000, B000, B000, B000, 11 ,
    B111, B111, B111, B111, B111, B111, B111, B111, B111, 11 ,
    B111, B111, B011, B101, B111, B111, B111, B111, B101, 11 ,
    B011, B111, B011, B101, B011, B111, B111, B110, B101, 11 ,
    B011, B111, B010, B101, B010, B111, B011, B110, B101, 11 ,
    B001, B111, B010, B101, B000, B111, B011, B010, B101, 11 ,
    B001, B101, B010, B101, B000, B101, B001, B010, B101, 11 ,
    B000, B101, B010, B101, B000, B001, B001, B000, B101, 11 ,
    B000, B101, B000, B100, B000, B001, B001, B000, B001, 11 ,
    B000, B001, B000, B100, B000, B000, B000, B000, B001, 11 ,
    B000, B000, B000, B000, B010, B000, B000, B000, B000, 11 ,
    0b111, 0b000, 0b000, 0b000, 0b111, 0b000, 0b000, 0b000, 0b111, 3,
    0b011, 0b001, 0b000, 0b010, 0b011, 0b000, 0b000, 0b100, 0b110, 3,
    0b001, 0b001, 0b001, 0b010, 0b010, 0b010, 0b100, 0b100, 0b100, 3,
    0b000, 0b001, 0b011, 0b000, 0b011, 0b010, 0b110, 0b100, 0b000, 3,
    0b000, 0b000, 0b111, 0b000, 0b111, 0b000, 0b111, 0b000, 0b000, 3,
    0b000, 0b100, 0b110, 0b000, 0b110, 0b010, 0b011, 0b001, 0b000, 3,
    0b100, 0b100, 0b100, 0b010, 0b010, 0b010, 0b001, 0b001, 0b001, 3,
    0b110, 0b100, 0b000, 0b010, 0b110, 0b000, 0b000, 0b001, 0b011, 11,

    // FILL & EMPTY
    0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 33,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,

    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

prog_uchar PROGMEM fillerPattern[] = {
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 33,
    0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 33,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b110, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b111, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b111, 0b110, 0b000, 3,
    0b111, 0b111, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b110, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 3,
    0b111, 0b110, 0b100, 0b111, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b100, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 3,
    0b111, 0b110, 0b100, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 3,
    0b111, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b110, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b110, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b110, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,
    0b100, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 3,

    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

prog_uchar PROGMEM teamPattern[] = {

    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 100,
    0b100, 0b010, 0b001, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b010, 0b010, 0b010, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b001, 0b010, 0b100, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b100, 0b010, 0b001, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b010, 0b010, 0b010, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b001, 0b010, 0b100, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 100,

    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 11,
    0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 100,
    0b000, 0b100, 0b000, 0b000, 0b010, 0b000, 0b000, 0b001, 0b000, 11,
    0b100, 0b000, 0b000, 0b000, 0b010, 0b000, 0b000, 0b000, 0b001, 11,
    0b000, 0b000, 0b000, 0b010, 0b010, 0b010, 0b000, 0b000, 0b000, 11,
    0b000, 0b000, 0b100, 0b000, 0b010, 0b000, 0b001, 0b000, 0b000, 11,
    0b000, 0b001, 0b000, 0b000, 0b010, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 0b000, 0b010, 0b000, 100,

    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b001, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b011, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b111, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b100, 0b000, 0b000, 0b111, 0b000, 11,
    0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 0b000, 0b111, 0b000, 11,
    0b000, 0b110, 0b000, 0b000, 0b100, 0b000, 0b000, 0b111, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b100, 0b000, 0b000, 0b111, 0b000, 100,
    0b100, 0b010, 0b001, 0b100, 0b000, 0b000, 0b100, 0b010, 0b001, 11,
    0b010, 0b010, 0b010, 0b010, 0b000, 0b000, 0b010, 0b010, 0b010, 11,
    0b001, 0b010, 0b100, 0b001, 0b000, 0b000, 0b001, 0b010, 0b100, 11,
    0b000, 0b111, 0b000, 0b000, 0b001, 0b000, 0b000, 0b111, 0b000, 11,
    0b100, 0b010, 0b001, 0b000, 0b000, 0b001, 0b100, 0b010, 0b001, 11,
    0b010, 0b010, 0b010, 0b000, 0b000, 0b010, 0b010, 0b010, 0b010, 11,
    0b001, 0b010, 0b100, 0b000, 0b000, 0b100, 0b001, 0b010, 0b100, 11,
    0b000, 0b111, 0b000, 0b000, 0b100, 0b000, 0b000, 0b111, 0b000, 100,

    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b000, 0b000, 0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b110, 0b000, 0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b100, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b110, 0b000, 0b000, 0b100, 0b000, 11,
    0b000, 0b111, 0b000, 0b000, 0b110, 0b000, 0b000, 0b101, 0b000, 100,
    0b100, 0b010, 0b001, 0b100, 0b010, 0b000, 0b100, 0b000, 0b001, 11,
    0b010, 0b010, 0b010, 0b010, 0b010, 0b000, 0b010, 0b000, 0b010, 11,
    0b001, 0b010, 0b100, 0b001, 0b010, 0b000, 0b001, 0b000, 0b100, 11,
    0b000, 0b111, 0b000, 0b000, 0b011, 0b000, 0b000, 0b101, 0b000, 11,
    0b100, 0b010, 0b001, 0b000, 0b010, 0b001, 0b100, 0b000, 0b001, 11,
    0b010, 0b010, 0b010, 0b000, 0b010, 0b010, 0b010, 0b000, 0b010, 11,
    0b001, 0b010, 0b100, 0b000, 0b010, 0b100, 0b001, 0b000, 0b100, 11,
    0b000, 0b111, 0b000, 0b000, 0b110, 0b000, 0b000, 0b101, 0b000, 100,

    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

prog_uchar PROGMEM onPattern[] = {
    0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 0b111, 10,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/*
** Defining pins in array makes it easier to rearrange how cube is wired
** Adjust numbers here until LEDs flash in order - L to R, T to B
** Note that analog inputs 0-5 are also digital outputs 14-19!
** Pin DigitalOut0 (serial RX) and AnalogIn5 are left open for future apps
*/

//int LEDPin[] = {16, 3, 1, 15, 4, 6, 14, 5, 7};
int LEDPin[] = { 2, 3, 4, 5, 6, 7, 8, 9, 10};

//int PlanePin[] = {19, 18, 17};
int PlanePin[] = {13, 12, 11};

int ButtonPin = A5;

int currentPattern = PATTERN_P_BASE;

int buttonState = 1;
int lastButtonState = buttonState;

// initialization
void setup()
{
    // loop counter
    int pin;
    // set up LED pins as output (active HIGH)
    for (pin=0; pin<PLANESIZE; pin++) {
    pinMode( LEDPin[pin], OUTPUT );
    }
    // set up plane pins as outputs (active LOW)
    for (pin=0; pin<CUBESIZE; pin++) {
    pinMode( PlanePin[pin], OUTPUT );
    }

    //set up Button
    pinMode( ButtonPin, INPUT_PULLUP);
    buttonState = digitalRead(ButtonPin);
    lastButtonState = buttonState;

    Serial.begin(9600);
}

void cyclePattern() {
    currentPattern++;
    if (currentPattern >= PATTERN_LENGTH) {
        currentPattern = 0;
    }
}

boolean checkButton() {
    lastButtonState = buttonState;
    buttonState = digitalRead(ButtonPin);
    if (buttonState != BUTTON_PRESSED && lastButtonState == BUTTON_PRESSED) {
        cyclePattern();
        return true;
    } else {
        return false;
    }
}

void loop() {
    checkButton();
    switch (currentPattern) {
        case PATTERN_P_CUSTOM:
        case PATTERN_P_TEAM:
            displayPattern(teamPattern);
            break;
        case PATTERN_P_FILLER:
            displayPattern(fillerPattern);
            break;
        case PATTERN_P_ON:
            displayPattern(onPattern);
            break;
        case PATTERN_P_BASE:
            default:
            displayPattern(basePattern);
        break;
    }
}

// display pattern in table until DisplayTime is zero (then repeat)
void displayPattern(prog_uchar *PatternTable)
{

    byte PatternBuf[ PLANESIZE ];     // saves current pattern from PatternTable
    int PatternIdx;
    byte DisplayTime;                 // time*100ms to display pattern
    unsigned long EndTime;
    int plane;                        // loop counter for cube refresh
    int patbufidx;                    // indexes which byte from pattern buffer
    int ledrow;                       // counts LEDs in refresh loop
    int ledcol;                       // counts LEDs in refresh loop
    int ledpin;                       // counts LEDs in refresh loop

    // Initialize PatternIdx to beginning of pattern table
    PatternIdx = 0;
    // loop over entries in pattern table - while DisplayTime>0
    do {
        // read pattern from PROGMEM and save in array
        memcpy_P( PatternBuf, PatternTable+PatternIdx, PLANESIZE );
        PatternIdx += PLANESIZE;
        // read DisplayTime from PROGMEM and increment index
        DisplayTime = pgm_read_byte_near( PatternTable + PatternIdx++ );

        // compute EndTime from current time (ms) and DisplayTime
        EndTime = millis() + ((unsigned long) DisplayTime) * TIMECONST;

        // loop while DisplayTime>0 and current time < EndTime
        while ( millis() < EndTime ) {
            patbufidx = 0;    // reset index counter to beginning of buffer
            // loop over planes
            for (plane=0; plane<CUBESIZE; plane++) {
                // turn previous plane off
                if (plane==0) {
                    digitalWrite( PlanePin[CUBESIZE-1], LOW );
                } else {
                    digitalWrite( PlanePin[plane-1], LOW );
                }

                // load current plane pattern data into ports
                ledpin = 0;
                for (ledrow=0; ledrow<CUBESIZE; ledrow++) {
                    for (ledcol=0; ledcol<CUBESIZE; ledcol++) {
                        digitalWrite( LEDPin[ledpin++], PatternBuf[patbufidx] & (1 << ledcol) );
                    }
                    patbufidx++;
                }

                // turn current plane on
                digitalWrite( PlanePin[plane], HIGH );
                // delay PLANETIME us
                delayMicroseconds( PLANETIME );

                // if button has changed cancel displayPattern
                if (checkButton()) return;

            }    // for plane
        }    // while <EndTime
    } while (DisplayTime > 0);        // read patterns until time=0 which signals end
}
